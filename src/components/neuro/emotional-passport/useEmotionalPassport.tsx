
import { useState } from 'react';
import { EmotionPoint } from './types';
import { EMOTION_COLORS, POSSIBLE_ARCHETYPES, EMOTION_TOOLTIPS, INITIAL_EMOTION_HISTORY } from './constants';
import { buildHistoryPath, buildHistoryPoints } from './graphUtils';
import { usePulseAnimation, useGraphAnimation } from './animationHooks';

// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç hook
export const useEmotionalPassport = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentEmotion, setCurrentEmotion] = useState('–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—è');
  const [emotionScore, setEmotionScore] = useState(71);
  const [emotionHistory, setEmotionHistory] = useState<EmotionPoint[]>(INITIAL_EMOTION_HISTORY);
  const [archetype, setArchetype] = useState('–ú—É–¥—Ä–µ—Ü');
  const [archetypeSymbol, setArchetypeSymbol] = useState('üßô');
  const [ipfsHash, setIpfsHash] = useState('QmHash123');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö—É–∫–∏
  const { pulseSize, pulseOpacity } = usePulseAnimation();
  const { graphProgress, resetAndAnimateGraph } = useGraphAnimation();
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —ç–º–æ—Ü–∏–∏
  const getCurrentColors = () => {
    return EMOTION_COLORS[currentEmotion] || ['#6495ED', '#483D8B'];
  };
  
  // –ú–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–º–æ—Ü–∏–π
  const possibleEmotions = Object.keys(EMOTION_COLORS);
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
  const updateEmotions = () => {
    // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —ç–º–æ—Ü–∏–∏
    const newEmotion = possibleEmotions[Math.floor(Math.random() * possibleEmotions.length)];
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –æ—Ç 50 –¥–æ 100
    const newScore = Math.floor(Math.random() * 51) + 50;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —ç–º–æ—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const newDay = emotionHistory.length + 1;
    const newTooltip = EMOTION_TOOLTIPS[Math.floor(Math.random() * EMOTION_TOOLTIPS.length)];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–º–æ—Ü–∏–π
    const updatedHistory = [
      ...emotionHistory,
      { emotion: newEmotion, score: newScore, day: newDay, tooltip: newTooltip }
    ];
    if (updatedHistory.length > 5) {
      updatedHistory.shift();
    }
    
    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∞
    const newArchetype = POSSIBLE_ARCHETYPES[Math.floor(Math.random() * POSSIBLE_ARCHETYPES.length)];
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setCurrentEmotion(newEmotion);
    setEmotionScore(newScore);
    setEmotionHistory(updatedHistory);
    setArchetype(newArchetype.name);
    setArchetypeSymbol(newArchetype.symbol);
    
    // –°–±—Ä–æ—Å –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    resetAndAnimateGraph();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IPFS —Ö–µ—à–∞
    const randomHash = `QmHash${Math.floor(Math.random() * 1000) + 100}`;
    setIpfsHash(randomHash);
  };
  
  return {
    currentEmotion,
    emotionScore,
    emotionHistory,
    archetype,
    archetypeSymbol,
    ipfsHash,
    pulseSize,
    pulseOpacity,
    graphProgress,
    emotionColors: EMOTION_COLORS,
    getCurrentColors,
    updateEmotions,
    buildHistoryPath: () => buildHistoryPath(emotionHistory),
    buildHistoryPoints: () => buildHistoryPoints(emotionHistory)
  };
};
